/* THIS FILE IS AUTOGENERATED FROM PushSubscription.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_PushSubscriptionBinding_h
#define mozilla_dom_PushSubscriptionBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
class PushSubscription;
struct PushSubscriptionAtoms;
struct PushSubscriptionJSONAtoms;
struct PushSubscriptionKeys;
struct PushSubscriptionKeysAtoms;
class WorkerPushSubscription;
struct WorkerPushSubscriptionAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class PushEncryptionKeyName : uint32_t {
  P256dh,
  Auth,
  EndGuard_
};

namespace PushEncryptionKeyNameValues {
extern const EnumEntry strings[3];
} // namespace PushEncryptionKeyNameValues

bool
ToJSValue(JSContext* aCx, PushEncryptionKeyName aArgument, JS::MutableHandle<JS::Value> aValue);


struct PushSubscriptionKeys : public DictionaryBase
{
  Optional<nsCString> mAuth;
  Optional<nsCString> mP256dh;

  PushSubscriptionKeys();

  explicit inline PushSubscriptionKeys(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline PushSubscriptionKeys(const PushSubscriptionKeys& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const PushSubscriptionKeys& aOther);

private:
  static bool
  InitIds(JSContext* cx, PushSubscriptionKeysAtoms* atomsCache);
};

namespace binding_detail {
struct FastPushSubscriptionKeys : public PushSubscriptionKeys
{
  inline FastPushSubscriptionKeys()
    : PushSubscriptionKeys(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct PushSubscriptionJSON : public DictionaryBase
{
  Optional<nsString> mEndpoint;
  PushSubscriptionKeys mKeys;

  PushSubscriptionJSON();

  explicit inline PushSubscriptionJSON(const FastDictionaryInitializer& )
    : mKeys(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline PushSubscriptionJSON(const PushSubscriptionJSON& aOther)
    : mKeys(FastDictionaryInitializer())
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const PushSubscriptionJSON& aOther);

private:
  static bool
  InitIds(JSContext* cx, PushSubscriptionJSONAtoms* atomsCache);
};

namespace binding_detail {
struct FastPushSubscriptionJSON : public PushSubscriptionJSON
{
  inline FastPushSubscriptionJSON()
    : PushSubscriptionJSON(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace PushSubscriptionBinding {

  typedef mozilla::dom::PushSubscription NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::PushSubscription* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace PushSubscriptionBinding



namespace PushSubscriptionBinding_workers {

  typedef mozilla::dom::WorkerPushSubscription NativeType;

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::WorkerPushSubscription* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace PushSubscriptionBinding_workers



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_PushSubscriptionBinding_h
